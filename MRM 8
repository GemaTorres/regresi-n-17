#### LIMITES PARA PREDECIR

### los limites sirven para dar un rango a la regresion porque hay situacones en las que fuera de rango
### carecen de sentido

Tasa.Respiracion <- c(71, 53, 55, 48, 69, 84, 21, 68, 68)
Potasio <- c(388, 258, 292, 205, 449, 331, 114, 580, 622)
Zinc <- c(2414, 10693, 11682, 12560, 2464, 2607, 16205, 2005, 1825)

estudio <- data.frame(Tasa.Respiracion, Potasio, Zinc)
pairs(estudio)
cor(estudio)

regnull <- lm(Tasa.Respiracion ~ 1, data =estudio)
allreg <- lm(Tasa.Respiracion ~ ., data =estudio)

# step(regnull, scope = list(lower=regnull, upper=allreg), direction = "forward")
# mod1 <- lm(formula = Tasa.Respiracion ~ Zinc, data = estudio)
# summary(mod1)

limestudio<- seq(min(estudio$Zinc), max(estudio$Zinc), length= 9)
limestudio<- data.frame(limestudio)
limestud<- predict.lm(allreg, limestudio, interval = "prediction", se.fit = TRUE, data= estudio) # prediccion para los limites
# generamos unos valores ajustados de y  

### extrane los limites

head(limestud$fit) # encabezado, los primeros valores

### para dibujar los limites
matplot(limestudio, limestud$fit, type = "l")
matplot(limestudio, limestud$fit, type = "l")
# grafica el valor ajustado
limestud$fit

############### predicciones ############

predict(allreg, data.frame(Zinc= 10000, Potasio= 40), interval = "predict")


############# EJERCICIO 02 ############
peso <- c(74, 92, 63, 58, 78, 85, 85, 73, 62, 80, 72, 74)
altura <- c(168, 196, 170, 175, 162, 169, 190 , 186, 176, 170, 176, 179)
ritmo <- c(62, 75, 60, 71, 66, 62, 79, 74, 70, 66, 71, 69)
edad <- c(25, 31, 29, 64, 44, 41, 37, 35, 34, 29, 19, 50) 


estudio <- data.frame(peso, altura, ritmo, edad)

regnull <- lm(ritmo ~ 1, data =estudio)
allreg <- lm(ritmo ~ ., data =estudio)

limestudio1<- seq(min(estudio$peso), max(estudio$peso), length= 12)
limestudio2<- seq(min(estudio$altura), max(estudio$altura), length= 12)
limestudio3<- seq(min(estudio$edad), max(estudio$edad), length= 12)
limestudio<- data.frame(limestudio1, limestudio2, limestudio3)
limestud<- predict.lm(allreg, limestudio, interval = "prediction", se.fit = TRUE, data= estudio)

head(limestud$fit)

matplot(limestudio, limestud$fit, type = "l")

predict(allreg, data.frame( altura= 190,peso= 60, edad=61), interval = "predict")


########## ejercicio 3 ########

N.cajas<- c(10, 15, 10, 20, 25, 18, 12, 14, 16, 22, 24, 17, 13, 30 ,24)
Distancia <- c(30, 25, 40, 18, 22, 31, 26, 34, 29, 37, 20, 25, 27, 23, 33)
Tiempo <- c(24, 27, 29, 31, 25, 33, 26, 28, 31, 39, 33, 30, 25, 42, 40)

estudio <- data.frame(N.cajas, Distancia, Tiempo)

estudio <- data.frame(Tiempo, altura, ritmo, edad)
pairs(estudio)
cor(estudio)

regnull <- lm(Tiempo ~ 1, data =estudio)
allreg <- lm(Tiempo ~ ., data =estudio)

step(regnull, scope = list(lower=regnull, upper=allreg), direction = "forward")
mod1 <- lm(formula = Tiempo ~ N.cajas + Distancia, data = estudio)
summary(mod1)

#1. Normalidad
shapiro.test(rstudent(mod1)) # prueba shapiro para normalidad
# p- value de .000001 lo cual es menor a 0.05 y  se rechaza H0, 
# es decir los errores no se distribuyen normal.
# NO hay normaldad en los residuos

# 2. Autocorrelacion 
require(lmtest)
bptest(mod1) # prueba breusch pagan que permite la autocorrelacion
# Este modelo nos permite saber que no hay mas de dos variables
# que aporten lo mismo al modelo
#H0: no hay mas de dos variables que aporten lo mismo al modelo (no rechazar p-value mayor a 0.05)
#Este modelo si cumple con el supuesto de autocorr ya que tiene un p-value de 0.2669

# 3. Independencia

dwtest(mod1, alternative = "two.sided")
#H0: los errores son ndependientes (no rechazar p-value mayor a 0.05)
# un p value menor a 0.05 o un DW [1.5 , 2.5]
# en este caso esta en la frontera CON 2.6193 y un p-vale de 0.2072

########## CORREGIR NORMALIDAD
#OUTLIER

install.packages("car")
require(car)
outlierTest(allreg, cutoff=0.05, n.max=5, order=T) ### observacion que es atipico
influencePlot(allreg, id.n=5)

# la observacion 5 es outlier 
# ahora para confirmar los casos con implicaciones
# se hace un grafico con distancias cook

mod2<- cooks.distance(allreg)
mod2 ### la distancias mas grandes son las 5, 14 y 4 pero la 5 es la mayor

install.packages("faraway")
require(faraway)
halfnorm(mod2, ylab = "dist cook" )
